# Map async-profiler source code as /app:
#   make build-analyzer
#   make docker-analyze

FROM public.ecr.aws/amazonlinux/amazonlinux:2023-minimal

ENV LLVM_VERSION=19.1.3
ENV GCC_VERSION=14.2.0
ENV CPPCHECK_VERSION=2.16.0
ENV CODECHECKER_VERSION=6.24.4

RUN dnf install -y \
        bzip2 \
        cmake3 \
        curl-minimal \
        g++ \
        gcc \
        git \
        java-21-amazon-corretto-devel \
        java-21-amazon-corretto-headless \
        jq \
        ninja-build \
        python3 \
        tar \
        xz && \
    dnf clean all && \
    pip install --no-cache-dir --force-reinstall --ignore-installed codechecker==$CODECHECKER_VERSION && \
    mkdir -p /build

# Build a recent clang (clang-tidy and clang static analyzer).
WORKDIR /build
RUN git clone --depth 1 https://github.com/llvm/llvm-project/ --branch "llvmorg-$LLVM_VERSION" --single-branch llvm && \
    mkdir -p llvm/build && cd llvm/build && cmake .. -G Ninja -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra' -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_BUILD_TYPE=Release ../llvm && \
    ninja && ninja install && \
    rm -rf /build/llvm && \
    clang -v

# Build a recent gcc (13+ required)
WORKDIR /build
RUN curl -fsSL "https://ftp.gnu.org/gnu/gcc/gcc-$GCC_VERSION/gcc-$GCC_VERSION.tar.xz" | tar xJf - && mv "gcc-$GCC_VERSION" gcc && \
    cd gcc && contrib/download_prerequisites && \
    ./configure --disable-multilib --enable-languages=c,c++ && \
    make -j "$(nproc)" && make -j "$(nproc)" install && \
    rm -rf /build/gcc && \
    gcc -v

# recent libstdc++
ENV LD_LIBRARY_PATH=/usr/local/lib64

# Build a recent cppcheck.
WORKDIR /build

RUN curl -fsSL "https://github.com/danmar/cppcheck/archive/refs/tags/$CPPCHECK_VERSION.tar.gz" | tar xzf - && mv "cppcheck-$CPPCHECK_VERSION" cppcheck && \
    cd cppcheck && \
    mkdir -p build && cd build && CC=clang CXX=clang++ cmake -G Ninja -DUSE_MATCHCOMPILER=ON -DFILESDIR=/usr/local/share/Cppcheck .. && \
    ninja && ninja install && \
    rm -rf /build/cppcheck && \
    cppcheck --version

# CodeChecker should now find all supported analyzers: clangsa, clang-tidy, cppcheck, gcc
RUN CodeChecker analyzers

# Sources need to be mounted as /app.
RUN mkdir -p /app
WORKDIR /app

# reports will be saved in build/reports/
ENTRYPOINT ["/bin/make", "analyze"]
